palantir_aliases:
  - &always-run
    filters:
      branches:
        only: /.*/
      tags:
        only: /.*/

version: 2
jobs:
  py3:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - restore_cache:
          key: tox-v1-py3-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "conda_recipe/meta.yaml" }}

      - run:
          name: Setup Tox Environment
          command: if [ ! -d ".tox" ]; then python -m tox -e py3 --notest; fi

      - save_cache:
          key: tox-v1-py3-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "conda_recipe/meta.yaml" }}
          paths:
            - .tox

      - run: python -m tox -e py3 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  lint:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - restore_cache:
          key: tox-v1-lint-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "conda_recipe/meta.yaml" }}

      - run:
          name: Setup Tox Environment
          command: if [ ! -d ".tox" ]; then python -m tox -e lint --notest; fi

      - save_cache:
          key: tox-v1-lint-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "conda_recipe/meta.yaml" }}
          paths:
            - .tox

      - run: python -m tox -e lint --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  publish:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Set publish version
          command: poetry version $(git describe --tags --abbrev=0)

      - deploy:
          command: poetry publish -v -u $PYPI_USERNAME -p $PYPI_PASSWORD --build


workflows:
  version: 2
  build:
    jobs:
      - py3:
          <<: *always-run
      - lint:
          <<: *always-run